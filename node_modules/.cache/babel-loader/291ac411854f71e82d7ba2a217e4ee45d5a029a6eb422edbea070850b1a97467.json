{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n      try {\n        sub = forward(operation).subscribe({\n          next: function (result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: function (networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: function () {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n  return ErrorLink;\n}(ApolloLink);\nexport { ErrorLink };","map":{"version":3,"mappings":";AAGA,SAASA,UAAU,QAAQ,0BAAkB;AAC7C,SAASC,UAAU,QAA0C,kBAAU;AAsBvE,OAAM,SAAUC,OAAO,CAACC,YAA0B;EAChD,OAAO,IAAIF,UAAU,CAAC,UAACG,SAAS,EAAEC,OAAO;IACvC,OAAO,IAAIL,UAAU,CAAC,kBAAQ;MAC5B,IAAIM,GAAQ;MACZ,IAAIC,UAAe;MACnB,IAAIC,aAAkB;MAEtB,IAAI;QACFF,GAAG,GAAGD,OAAO,CAACD,SAAS,CAAC,CAACK,SAAS,CAAC;UACjCC,IAAI,EAAE,gBAAM;YACV,IAAIC,MAAM,CAACC,MAAM,EAAE;cACjBJ,aAAa,GAAGL,YAAY,CAAC;gBAC3BU,aAAa,EAAEF,MAAM,CAACC,MAAM;gBAC5BE,QAAQ,EAAEH,MAAM;gBAChBP,SAAS;gBACTC,OAAO;eACR,CAAC;cAEF,IAAIG,aAAa,EAAE;gBACjBD,UAAU,GAAGC,aAAa,CAACC,SAAS,CAAC;kBACnCC,IAAI,EAAEK,QAAQ,CAACL,IAAI,CAACM,IAAI,CAACD,QAAQ,CAAC;kBAClCE,KAAK,EAAEF,QAAQ,CAACE,KAAK,CAACD,IAAI,CAACD,QAAQ,CAAC;kBACpCG,QAAQ,EAAEH,QAAQ,CAACG,QAAQ,CAACF,IAAI,CAACD,QAAQ;iBAC1C,CAAC;gBACF;;;YAGJA,QAAQ,CAACL,IAAI,CAACC,MAAM,CAAC;UACvB,CAAC;UACDM,KAAK,EAAE,sBAAY;YACjBT,aAAa,GAAGL,YAAY,CAAC;cAC3BC,SAAS;cACTe,YAAY;cAEZN,aAAa,EACXM,YAAY,IACZA,YAAY,CAACR,MAAM,IACnBQ,YAAY,CAACR,MAAM,CAACC,MAAM;cAC5BP,OAAO;aACR,CAAC;YACF,IAAIG,aAAa,EAAE;cACjBD,UAAU,GAAGC,aAAa,CAACC,SAAS,CAAC;gBACnCC,IAAI,EAAEK,QAAQ,CAACL,IAAI,CAACM,IAAI,CAACD,QAAQ,CAAC;gBAClCE,KAAK,EAAEF,QAAQ,CAACE,KAAK,CAACD,IAAI,CAACD,QAAQ,CAAC;gBACpCG,QAAQ,EAAEH,QAAQ,CAACG,QAAQ,CAACF,IAAI,CAACD,QAAQ;eAC1C,CAAC;cACF;;YAEFA,QAAQ,CAACE,KAAK,CAACE,YAAY,CAAC;UAC9B,CAAC;UACDD,QAAQ,EAAE;YAGR,IAAI,CAACV,aAAa,EAAE;cAClBO,QAAQ,CAACG,QAAQ,CAACF,IAAI,CAACD,QAAQ,CAAC,EAAE;;UAEtC;SACD,CAAC;OACH,CAAC,OAAOK,CAAC,EAAE;QACVjB,YAAY,CAAC;UAAEgB,YAAY,EAAEC,CAAC;UAAEhB,SAAS;UAAEC,OAAO;QAAA,CAAE,CAAC;QACrDU,QAAQ,CAACE,KAAK,CAACG,CAAC,CAAC;;MAGnB,OAAO;QACL,IAAId,GAAG,EAAEA,GAAG,CAACe,WAAW,EAAE;QAC1B,IAAId,UAAU,EAAED,GAAG,CAACe,WAAW,EAAE;MACnC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA;EAA+BC;EAE7B,mBAAYnB,YAAoC;IAAhD,YACEoB,iBAAO;IACPC,KAAI,CAACC,IAAI,GAAGvB,OAAO,CAACC,YAAY,CAAC;;EACnC;EAEOuB,2BAAO,GAAd,UACEtB,SAAoB,EACpBC,OAAiB;IAEjB,OAAO,IAAI,CAACoB,IAAI,CAACE,OAAO,CAACvB,SAAS,EAAEC,OAAO,CAAC;EAC9C,CAAC;EACH,gBAAC;AAAD,CAAC,CAb8BJ,UAAU","names":["Observable","ApolloLink","onError","errorHandler","operation","forward","sub","retriedSub","retriedResult","subscribe","next","result","errors","graphQLErrors","response","observer","bind","error","complete","networkError","e","unsubscribe","__extends","_super","_this","link","ErrorLink","request"],"sources":["C:\\Users\\wisdom\\React\\store\\store\\node_modules\\@apollo\\src\\link\\error\\index.ts"],"sourcesContent":["import { ExecutionResult } from 'graphql';\n\nimport { NetworkError, GraphQLErrors } from '../../errors';\nimport { Observable } from '../../utilities';\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\n\nexport interface ErrorResponse {\n  graphQLErrors?: GraphQLErrors;\n  networkError?: NetworkError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub: any;\n      let retriedSub: any;\n      let retriedResult: any;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}